from modules.createToken import generate_token
from modules.getLocalIP import get_ip
import os
# This is a config file for both gunicorn and app.py 
# For documentation for gunicorn follow this below
# https://docs.gunicorn.org/en/stable/settings.html
# Run this to start it: gunicorn -c gunicornConfig.py app:app


# This will attempt to get your local ip to bind to it.
# Change this if it doesn't work right or if you want to add your own domain
ip = get_ip()
port = '8000'

bind = f'{ip}:{port}'

# Enable https by adding your tls certificates here.
#certfile = 'path/to/tls/certs.pem'
#keyfile = 'path/to/tls/key.pem'

# You can increase gunicorn verbosity here.
#loglevel = 'debug'

# The number of worker and threads for gunicorn.
# Having multiple workers may not play well with authentication
# A few threads should suffice as long as you don't get
# flooded with thousands of simultaneous requests.
worker_class = 'gthread'
workers = 1
threads = 16

# The timeout for workers.
timeout = 30



# qrFileServer configs

# Authentication config
# 
# Authentication is done by checking 3 places
#  - A token in the url query parameter
#  - Cookies with the token parameter
#  - HTTP Auth
#
#  The url query parameter is the easiest way to authenticate and it is meant
#  to be randomly generated on each run.
#
# Generate a 16 character alphanumeric token for file access.
token = generate_token(16)
# Users and password for http auth is stored in a dictionary
users = {
    "token": token,
}

# Configure this to customize the qrcode to display
# If using certfile and keyfile, make sure to add a 's' in front of http
host = f'http://{bind}/?token={token}'




